{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","title","react_default","a","createElement","src","alt","MovieGenre","_ref3","genre","className","Movie","_ref","genres","synopsis","map","index","key","App","_getMovies","_callee","resp","json","regenerator_default","wrap","_context","prev","next","fetch","sent","_this","setState","movies","data","console","log","state","stop","this","_renderMovies","movie","src_movie_0","title_english","medium_cover_image","id","greeting","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SA4DA,SAASA,EAATC,GAAqC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,MAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,MAAOA,EAAOK,IAAKL,IASzC,SAASM,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACnB,OAAQP,EAAAC,EAAAC,cAAA,QAAMM,UAAU,eAAeD,EAA/B,KAOKE,MA1Df,SAAAC,GAAkD,IAAlCX,EAAkCW,EAAlCX,MAAOD,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACrC,OACIZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACbR,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,MAAOA,KAEtCC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACbR,EAAAC,EAAAC,cAAA,UAAKH,GACLC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACZG,EAAOE,IAAI,SAACN,EAAOO,GAAR,OAAkBd,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAE/Dd,EAAAC,EAAAC,cAAA,KAAGM,UAAU,kBACVI,MCiBEI,oNAnCbC,gCAAa,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAApB,EAAAqB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQC,MAAM,yDADd,cACLP,EADKI,EAAAI,KAAAJ,EAAAE,KAAA,EAEQN,EAAKC,OAFb,OAELA,EAFKG,EAAAI,KAGXC,EAAKC,SAAS,CACZC,OAAQV,EAAKW,KAAKD,SAEpBE,QAAQC,IAAIL,EAAKM,MAAMJ,QANZ,wBAAAP,EAAAY,SAAAjB,EAAAkB,WASbC,cAAgB,WASd,OAReT,EAAKM,MAAMJ,OAAOjB,IAAI,SAACyB,EAAOxB,GAC3C,OAAOd,EAAAC,EAAAC,cAACqC,EAAD,CAAOxC,MAAOuC,EAAME,cACb1C,OAAQwC,EAAMG,mBACd9B,OAAQ2B,EAAM3B,OACdC,SAAU0B,EAAM1B,SAChBG,IAAKuB,EAAMI,UAM7BR,MAAQ,CACNS,SAAU,2IAzBVP,KAAKnB,8CA6BL,OACEjB,EAAAC,EAAAC,cAAA,OAAKM,UAAW4B,KAAKF,MAAMJ,OAAS,MAAQ,eACzCM,KAAKF,MAAMJ,OAASM,KAAKC,gBACL,qBAvCXO,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9c2d102a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './movie.css';\r\n\r\n// class Movie extends Component {\r\n  \r\n//   static propTypes = {\r\n//     title: PropTypes.string.isRequired,\r\n//     poster: PropTypes.string.isRequired\r\n//   }\r\n\r\n//   render() {\r\n//     return(\r\n//       <div>\r\n//         <MoviePoster poster={this.props.poster}/>\r\n//         <h1>{this.props.title}</h1>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n  return (\r\n      <div className=\"movie\">\r\n        <div className=\"movie_colums\">\r\n          <MoviePoster poster={poster} title={title}/>\r\n        </div>\r\n        <div className=\"movie_colums\">\r\n          <h1>{title}</h1>\r\n          <div className=\"movie_genres\">\r\n            {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n          </div>\r\n          <p className=\"movie_synopsis\">\r\n            {synopsis}\r\n          </p>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\n\r\n// class MoviePoster extends Component {\r\n\r\n//   static propTypes = {\r\n//     poster: PropTypes.string.isRequired\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <img width=\"100px\" src={this.props.poster} alt=\"Hi\"/>\r\n//     );\r\n//   }\r\n// }\r\n\r\nfunction MoviePoster({poster, title}){\r\n  return (\r\n    <img src={poster} title={title} alt={title}/>\r\n  );\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n  return (<span className=\"movie_genre\">{genre} </span>)\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport Movie from './movie';\nimport './App.css';\n\n\nclass App extends Component {\n\n  componentWillMount(){\n\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n  \n  _getMovies = async() => {\n    const resp = await fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating');\n    const json = await resp.json();\n    this.setState({\n      movies: json.data.movies\n    })\n    console.log(this.state.movies)\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      return <Movie title={movie.title_english}\n                    poster={movie.medium_cover_image}\n                    genres={movie.genres}\n                    synopsis={movie.synopsis}\n                    key={movie.id}/>\n    })\n\n    return movies;\n  }\n\n  state = {\n    greeting: \"Hello!\"\n  }\n\n  render() { //All component should has render function.\n    return (\n      <div className={this.state.movies ? \"App\" : \"App-loading\"}>\n        {this.state.movies ? this._renderMovies()\n                           : \"Loading...\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}